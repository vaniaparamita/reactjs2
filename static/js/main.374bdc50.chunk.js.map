{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","color","img","img2","menu","setState","_this2","react_default","a","createElement","id","className","items","map","index","style","concat","onClick","clicked","bind","key","src","width","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.374bdc50.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      name : 'Home',\r\n      color : 'grey',\r\n      img : 'Home.jpg',\r\n      img2 : 'home.png'\r\n    };\r\n  }\r\n\r\n  clicked(menu) {\r\n    //utk memperbarui state sesuai dengan menu yang digunakan\r\n    this.setState({\r\n      name : menu.name,\r\n      color: menu.color,\r\n      img : menu.img,\r\n      img2 : menu.img2,\r\n    })\r\n  }\r\n  /*menusaya(){\r\n    if (this.state.active.toLowerCase()==='Red'){\r\n\t\t\tgambar = \"Red\";\r\n\t\t}\r\n\t\telse if (this.state.active.toLowerCase()==='Yellow'){\r\n\t\t\tgambar = \"Yellow\";\r\n\t\t}\r\n\t\telse if (this.state.active.toLowerCase()==='Green'){\r\n\t\t\tgambar = \"Green\";\r\n\t\t}\r\n\t\telse if (this.state.active.toLowerCase()==='Blue'){\r\n\t\t\tgambar = \"Blue\";\r\n\t\t} \r\n    return <img src={this.state.color+\".jpg\"} width=\"240\"></img>\r\n}*/\r\n\r\n  render(){\r\n    return(\r\n      <div id=\"app\">\r\n          <nav className=\"nav\">{this.props.items.map((\r\n            menu, index)=> {\r\n              var style = 'menu';\r\n\r\n              if(this.state.color===menu.color){\r\n                style = `${style} is-active`;\r\n              } //muncul warna berbeda ketika diklik\r\n            \r\n          return <div \r\n                  className={style+\" \"+menu.color}\r\n                  onClick={this.clicked.bind(this,menu)}\r\n                  key={index}>\r\n                  {menu.name}\r\n                  </div>;\r\n           }) }\r\n          </nav>\r\n          \r\n          <div className=\"info\">                  \r\n          This is <span className={\"selected \"+this.state.color}>{this.state.color}</span>\r\n            <br></br>\r\n          <br></br>\r\n          <img src={this.state.img} width=\"240\"></img>\r\n          <br></br>\r\n          <br></br>\r\n          <img src={this.state.img2} width=\"240\"></img>\r\n          </div>\r\n  </div>\r\n    ); \r\n}}\r\nexport default App;    ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './custom.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst items = [\r\n    {   \r\n         name: 'Elmo Apple',\r\n         color : 'red',\r\n         img : 'red.jpg',\r\n         img2 : 'two.jpg',\r\n           \r\n    },\r\n    {   \r\n        name: 'Spongebob Peer',\r\n        color : 'yellow',\r\n        img : 'yellow.jpg',\r\n        img2 : 'three.png'   \r\n    },\r\n    {\r\n        name: 'Mike Apple',\r\n        color : 'green',\r\n        img : 'green.jpg', \r\n        img2 :'four.png',  \r\n    },\r\n    {\r\n        name: 'Stitch Apple',\r\n        color : 'blue',\r\n        img : 'blue.jpg',   \r\n        img2 : 'one.png', \r\n    }\r\n\r\n];\r\n\r\nReactDOM.render(<App items={items}/>, \r\ndocument.getElementById('root'));\r\n\r\nserviceWorker.register();"],"sourceRoot":""}